package edu.buffalo.cse.cse486586.groupmessenger;

import java.io.BufferedReader;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.concurrent.ConcurrentLinkedQueue;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.telephony.TelephonyManager;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

/**
 * GroupMessengerActivity is the main Activity for the assignment.
 * 
 * @author stevko
 *
 */
public class GroupMessengerActivity extends Activity {

	static final String TAG = GroupMessengerActivity.class.getSimpleName();
	static final String REMOTE_PORT0 = "11108";
	static final String REMOTE_PORT1 = "11112";
	static final String REMOTE_PORT2 = "11116";
	static final String REMOTE_PORT3 = "11120";
	static final String REMOTE_PORT4 = "11124";
	static final int SERVER_PORT = 10000;
	static int localCounter = 0;
	static int  sequencerOrder = 0;
	String portStr = null;
	public static ConcurrentLinkedQueue<String> holdBack= new ConcurrentLinkedQueue<String>();
	boolean canPublish = false;
	boolean canMulticast = false;
	static String msgNo =null;

	private  Uri mUri; //final keywrd remove



	private Uri buildUri(String scheme, String authority) {
		Uri.Builder uriBuilder = new Uri.Builder();
		uriBuilder.authority(authority);
		uriBuilder.scheme(scheme);
		return uriBuilder.build();
	}

	public void setUri()
	{
		mUri = buildUri("content", "edu.buffalo.cse.cse486586.groupmessenger.provider");
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_group_messenger);



		try
		{
			TelephonyManager tel = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);
			Log.i("Telephony", tel.toString());
			portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);					
		}
		catch(Exception e)
		{
			Log.i("Telephony", e.getMessage());
		}
		final String myPort = String.valueOf((Integer.parseInt(portStr) * 2));
		Log.i("Telephony", myPort);


		try {
			/*
			 * Create a server socket as well as a thread (AsyncTask) that listens on the server
			 * port.
			 * 
			 * AsyncTask is a simplified thread construct that Android provides. Please make sure
			 * you know how it works by reading
			 * http://developer.android.com/reference/android/os/AsyncTask.html
			 */
			ServerSocket serverSocket = new ServerSocket(SERVER_PORT);
			new ServerTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, serverSocket);			
		} catch (IOException e) {
			/*
			 * Log is a good way to debug your code. LogCat prints out all the messages that
			 * Log class writes.
			 * 
			 * Please read http://developer.android.com/tools/debugging/debugging-projects.html
			 * and http://developer.android.com/tools/debugging/debugging-log.html
			 * for more information on debugging.
			 */
			Log.e(TAG, "Can't create a ServerSocket");
			Log.e(TAG, e.getMessage());			
			return;
		}

		final Button btnSend = (Button) findViewById(R.id.button4);
		btnSend.setOnClickListener(new OnClickListener() {


			@Override
			public void onClick(View arg0) {

				final EditText editText = (EditText) findViewById(R.id.editText1);
				Log.i("btnsend Onclick",editText.toString());
				String msg = editText.getText().toString() + "\n";
				Log.i("btnsend Onclick",msg.toString());
				editText.setText("");
				TextView localTextView = (TextView) findViewById(R.id.textView1);
				localTextView.append("\t" + msg); 
				new SequencerTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, msg, myPort);
				// TODO Auto-generated method stub

				Log.i("btnsend Onclick","end");
			}
		});

		/*
		 * TODO: Use the TextView to display your messages. Though there is no grading component
		 * on how you display the messages, if you implement it, it'll make your debugging easier.
		 */
		TextView tv = (TextView) findViewById(R.id.textView1);
		tv.setMovementMethod(new ScrollingMovementMethod());

		/*
		 * Registers OnPTestClickListener for "button1" in the layout, which is the "PTest" button.
		 * OnPTestClickListener demonstrates how to access a ContentProvider.
		 */
		findViewById(R.id.button1).setOnClickListener(
				new OnPTestClickListener(tv, getContentResolver()));

		/*
		 * TODO: You need to register and implement an OnClickListener for the "Send" button.
		 * In your implementation you need to get the message from the input box (EditText)
		 * and send it to other AVDs in a total-causal order.
		 */


	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_group_messenger, menu);
		return true;
	}

	public void onClickSend(View view)
	{
		ContentValues values =  new ContentValues();

		values.put(GroupMessengerProvider.key, GroupMessengerProvider.value);
	}

	public String Sequencer(String buffer)
	{
		// TODO Auto-generated method stub
		Log.i("(2.1)In sequencer method", buffer);
		String []unOrderedMsg = null;
		if(buffer.contains("unordered"))
		{
			unOrderedMsg = buffer.split(":");
		}
		for (int j = 0; j < unOrderedMsg.length; j++) 
		{
			Log.i("seq buffer after split", unOrderedMsg[j]);
		}

		String msgToOrder = unOrderedMsg[0];
		msgToOrder  = msgToOrder + "%"+sequencerOrder;
		Log.i("(2.2)seq : "+sequencerOrder, msgToOrder);
		sequencerOrder++;

		return msgToOrder;
	}

	private class ServerTask extends AsyncTask<ServerSocket, String, Void> {

		@Override
		protected Void doInBackground(ServerSocket... sockets) {
			ServerSocket serverSocket = sockets[0];
			Log.i("ServerTask", serverSocket.toString());
			Socket ClientSocket;
			MessageWrapper msg ;
			try {
				InputStreamReader in = null;
				//ObjectInputStream in =null;
				BufferedReader recvdMessage = null;

				while(true)
				{
					Log.i("ServerTask (3) in while loop", serverSocket.toString());
					ClientSocket = serverSocket.accept();

					in = new InputStreamReader(ClientSocket.getInputStream());
					recvdMessage = new BufferedReader(in);

					String input=null;
					String buffer="";
					

					while((input = recvdMessage.readLine()) != null)
					{
						buffer = buffer + input;
					}
					Log.i("ServerTask (3.1) buffer", buffer.toString());

					
					if(buffer.contains("unordered"))
					{
						Log.i("In (4)"+portStr+"Unordered loop", buffer);
						buffer = Sequencer(buffer);
						new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, buffer);
//						if(buffer.contains("%"))
//						{
//							String []orderArr = buffer.split("%");
//							buffer = orderArr[0];
//							msgNo = orderArr[1];
//							Log.i("(4.1)msgNo", msgNo);
//							new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, buffer);
//						}
					}

					else
					{
						String []orderArr = buffer.split("%");
						buffer = orderArr[0];
						msgNo = orderArr[1];
						Log.i("msgNo", msgNo+"");
						GroupMessengerProvider.insertContent(msgNo, buffer, getContentResolver());

						publishProgress(buffer);
						//canPublish = false;
						//canMulticast = true;
					}
				}

			}
			catch(IOException e)
			{
				Log.e(TAG,"the exception : " + e);

			} 
			/*
			 * TODO: Fill in your server code that receives messages and passes them
			 * to onProgressUpdate().
			 */
			return null;
		}

		protected void onProgressUpdate(String...strings) {
			/*
			 * The following code displays what is received in doInBackground().
			 */
			String strReceived = strings[0].trim();
			Log.i("onProgressUpdate", strReceived);
			/*TextView remoteTextView = (TextView) findViewById(R.id.remote_text_display);
    		remoteTextView.append(strReceived + "\t\n");*/
			TextView localTextView = (TextView) findViewById(R.id.textView1);
			localTextView.append(strReceived);
			localTextView.append("\n");

			/*
			 * The following code creates a file in the AVD's internal storage and stores a file.
			 * 
			 * For more information on file I/O on Android, please take a look at
			 * http://developer.android.com/training/basics/data-storage/files.html
			 */

			String filename = "SimpleMessengerOutput";
			String string = strReceived + "\n";
			FileOutputStream outputStream;

			try {
				outputStream = openFileOutput(filename, Context.MODE_PRIVATE);
				outputStream.write(string.getBytes());
				outputStream.close();
			} catch (Exception e) {
				Log.e(TAG, "File write failed");
			}

			return;
		}
	}

	private class SequencerTask extends AsyncTask<String, Void, Void> {

		@Override
		protected Void doInBackground(String... msgs) {
			try {

				Socket socket;
				socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),11108);
				Log.i("(1)SequencerTask ", socket.toString());
				String msgToSend = msgs[0];
				Log.i("(2)SequencerTask - msg", msgToSend.toString());
				msgToSend = msgToSend + ":unordered";
				OutputStreamWriter out = new OutputStreamWriter(socket.getOutputStream());
				PrintWriter sendMsg = new PrintWriter(out);
				sendMsg.println(msgToSend);
				sendMsg.flush();
				socket.close();
				//sequencerOrder++;
				Log.i("sequencerOrder:",sequencerOrder+"" );
			}
			catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}


	private class ClientTask extends AsyncTask<String, Void, Void> {

		@Override
		protected Void doInBackground(String... msgs) {
			try {

				Socket socket;
				for (int i = 11108; i < 11125; i = i+4) 
				{
					socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),i);
					Log.i("(9)Client task", socket.toString());

					String msgToSend = msgs[0];
					Log.i("(10)Client task - msg", msgToSend.toString());
					//msgToSend = msgToSend + ":unordered";
					OutputStreamWriter out = new OutputStreamWriter(socket.getOutputStream());
					PrintWriter sendMsg = new PrintWriter(out);
					sendMsg.println(msgToSend);
					sendMsg.flush();
					socket.close();
				}
				canMulticast = true;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}
	}

	class MessageWrapper
	{
		public MessageWrapper(String msg, String msgNo,int avdNo) {
			this.msg = msg;
			this.msgNo = msgNo;
			this.avdNo = avdNo;
		}
		String msg;
		String msgNo;
		int avdNo;

	}

	//sequencer method()
	// sequencer will get the mesg and add a sequence number
	//

}


